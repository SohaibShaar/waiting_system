generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Patient {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(255)
  phoneNumber     String?          @db.VarChar(20)
  nationalId      String?          @unique @db.VarChar(50)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  AccountingData  AccountingData[]
  BloodDrawData   BloodDrawData[]
  completedVisits CompletedVisit[]
  DoctorData      DoctorData[]
  LabData         LabData[]
  queues          Queue[]
  ReceptionData   ReceptionData[]

  @@index([phoneNumber])
  @@index([nationalId])
  @@map("patients")
}

model Station {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(255)
  displayNumber Int            @unique
  order         Int            @unique
  isActive      Boolean        @default(true)
  description   String?        @db.Text
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  queueHistory  QueueHistory[]
  queues        Queue[]

  @@index([order])
  @@map("stations")
}

model Queue {
  id               Int                @id @default(autoincrement())
  queueNumber      Int
  patientId        Int
  currentStationId Int
  status           OverallQueueStatus @default(ACTIVE)
  priority         Int                @default(0)
  notes            String?            @db.Text
  createdAt        DateTime           @default(now())
  completedAt      DateTime?
  AccountingData   AccountingData?
  BloodDrawData    BloodDrawData?
  DoctorData       DoctorData?
  LabData          LabData?
  history          QueueHistory[]
  currentStation   Station            @relation(fields: [currentStationId], references: [id])
  patient          Patient            @relation(fields: [patientId], references: [id], onDelete: Cascade)
  ReceptionData    ReceptionData?

  @@unique([queueNumber, createdAt])
  @@index([patientId])
  @@index([currentStationId])
  @@index([status])
  @@index([createdAt])
  @@map("queues")
}

model QueueHistory {
  id          Int         @id @default(autoincrement())
  queueId     Int
  stationId   Int
  status      QueueStatus @default(WAITING)
  calledAt    DateTime?
  startedAt   DateTime?
  completedAt DateTime?
  notes       String?     @db.Text
  calledBy    String?     @db.VarChar(255)
  createdAt   DateTime    @default(now())
  queue       Queue       @relation(fields: [queueId], references: [id], onDelete: Cascade)
  station     Station     @relation(fields: [stationId], references: [id])

  @@index([queueId])
  @@index([stationId])
  @@index([status])
  @@index([calledAt])
  @@map("queue_history")
}

model CompletedVisit {
  id            Int      @id @default(autoincrement())
  patientId     Int
  queueNumber   Int
  totalDuration Int?
  waitingTime   Int?
  serviceTime   Int?
  stationsCount Int
  visitData     String?  @db.LongText
  notes         String?  @db.Text
  completedAt   DateTime @default(now())
  patient       Patient  @relation(fields: [patientId], references: [id])

  @@index([patientId])
  @@index([completedAt])
  @@map("completed_visits")
}

model SystemSettings {
  id          Int      @id @default(autoincrement())
  key         String   @unique @db.VarChar(255)
  value       String   @db.Text
  description String?  @db.Text
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

model ReceptionData {
  id                 Int          @id @default(autoincrement())
  patientId          Int
  queueId            Int          @unique
  maleName           String?      @db.VarChar(255)
  maleLastName       String?      @db.VarChar(255)
  maleFatherName     String?      @db.VarChar(255)
  maleBirthDate      DateTime?    @db.DateTime(0)
  maleNationalId     String?      @db.VarChar(255)
  maleAge            Int?
  femaleName         String?      @db.VarChar(255)
  femaleLastName     String?      @db.VarChar(255)
  femaleFatherName   String?      @db.VarChar(255)
  femaleBirthDate    DateTime?    @db.DateTime(0)
  femaleNationalId   String?      @db.VarChar(255)
  femaleAge          Int?
  notes              String?      @db.Text
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  phoneNumber        String?      @db.VarChar(20)
  maleStatus         SpouseStatus @default(NORMAL)
  femaleStatus       SpouseStatus @default(NORMAL)
  maleBirthPlace     String?      @db.VarChar(255)
  maleRegistration   String?      @db.VarChar(255)
  maleCountry        String?      @db.VarChar(255)
  femaleBirthPlace   String?      @db.VarChar(255)
  femaleRegistration String?      @db.VarChar(255)
  femaleCountry      String?      @db.VarChar(255)
  patient            Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)
  queue              Queue        @relation(fields: [queueId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([queueId])
  @@index([maleNationalId])
  @@index([femaleNationalId])
  @@map("reception_data")
}

model AccountingData {
  id          Int      @id @default(autoincrement())
  patientId   Int
  queueId     Int      @unique
  totalAmount Float?   @default(0)
  isPaid      Boolean  @default(false)
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  queue       Queue    @relation(fields: [queueId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([queueId])
  @@map("accounting_data")
}

model LabData {
  id              Int      @id @default(autoincrement())
  patientId       Int
  queueId         Int      @unique
  doctorName      String?  @db.VarChar(255)
  isMaleHealthy   Status   @default(HEALTHY)
  isFemaleHealthy Status   @default(HEALTHY)
  maleNotes       String?  @db.Text
  femaleNotes     String?  @db.Text
  notes           String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  patient         Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  queue           Queue    @relation(fields: [queueId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([queueId])
  @@index([doctorName])
  @@map("lab_data")
}

model BloodDrawData {
  id               Int      @id @default(autoincrement())
  patientId        Int
  queueId          Int      @unique
  // أرقام أنابيب الدم الفريدة
  maleBloodTube1   String?  @unique @db.VarChar(50) // 11{patientId}
  maleBloodTube2   String?  @unique @db.VarChar(50) // 12{patientId}
  femaleBloodTube1 String?  @unique @db.VarChar(50) // 21{patientId}
  femaleBloodTube2 String?  @unique @db.VarChar(50) // 22{patientId}
  notes            String?  @db.Text
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  patient          Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  queue            Queue    @relation(fields: [queueId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([queueId])
  @@map("blood_draw_data")
}

model DoctorData {
  id              Int            @id @default(autoincrement())
  patientId       Int
  queueId         Int            @unique
  maleBloodType   String?        @db.VarChar(255)
  femaleBloodType String?        @db.VarChar(255)
  maleHIVstatus   DiseasesStatus @default(NEGATIVE)
  femaleHIVstatus DiseasesStatus @default(NEGATIVE)
  maleHBSstatus   DiseasesStatus @default(NEGATIVE)
  femaleHBSstatus DiseasesStatus @default(NEGATIVE)
  maleHBCstatus   DiseasesStatus @default(NEGATIVE)
  femaleHBCstatus DiseasesStatus @default(NEGATIVE)
  maleNotes       String?        @db.Text
  femaleNotes     String?        @db.Text
  notes           String?        @db.Text
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  patient         Patient        @relation(fields: [patientId], references: [id], onDelete: Cascade)
  queue           Queue          @relation(fields: [queueId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([queueId])
  @@map("doctor_data")
}

model fastaddvalue {
  id        Int      @id @default(autoincrement())
  value     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model favoriteprice {
  id        Int      @id @default(autoincrement())
  label     String
  value     Float
  createdAt DateTime @default(now())
  updatedAt DateTime
}

enum QueueStatus {
  WAITING
  CALLED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  SKIPPED
}

enum OverallQueueStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum Status {
  HEALTHY
  UNHEALTHY
}

enum DiseasesStatus {
  POSITIVE
  NEGATIVE
}

enum SpouseStatus {
  NORMAL
  LEGAL_INVITATION
  NOT_EXIST
  OUT_OF_COUNTRY
  OUT_OF_PROVINCE
}
